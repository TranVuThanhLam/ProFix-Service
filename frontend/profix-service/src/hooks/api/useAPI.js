import { useState, useRef, useCallback } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import axiosClient from "./axiosClient";

export default function useApi() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const controllerRef = useRef(null);

  const callApi = useCallback(
    async ({
      method = "get",
      url,
      body = null,
      config = {},
      silent = false,
      customErrorHandler = null,
    }) => {
      setLoading(true);
      setError(null);

      if (controllerRef.current) {
        controllerRef.current.abort();
      }
      controllerRef.current = new AbortController();

      try {
        const response = await axiosClient({
          method,
          url,
          data: body,
          signal: controllerRef.current.signal,
          ...config,
        });
        setData(response.data);
        return response.data;
      } catch (err) {
        if (axios.isCancel?.(err)) {
          console.log("Request cancelled");
        } else {
          console.error(err);
          setError(err);
          if (!silent) {
            if (customErrorHandler) {
              customErrorHandler(err);
            } else {
              showDefaultError(err);
            }
          }
        }
        throw err;
      } finally {
        setLoading(false);
      }
    },
    []
  ); // üëà Quan tr·ªçng: dependencies r·ªóng ƒë·ªÉ ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh

  const showDefaultError = (err) => {
    const status = err?.response?.status;
    const message =
      err?.response?.data?.message || "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i!";

    switch (status) {
      case 400:
        Swal.fire({
          icon: "warning",
          title: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          text: message,
        });
        break;
      case 401:
        Swal.fire({
          icon: "error",
          title: "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n",
          text: "Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        }).then(() => {
          window.location.href = "/login"; // üëâ T·ª± ƒë·ªông chuy·ªÉn login n·∫øu mu·ªën
        });
        break;
      case 403:
        Swal.fire({
          icon: "error",
          title: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
          text: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.",
        });
        break;
      case 404:
        Swal.fire({
          icon: "error",
          title: "Kh√¥ng t√¨m th·∫•y",
          text: "D·ªØ li·ªáu b·∫°n y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i.",
        });
        break;
      case 500:
        Swal.fire({
          icon: "error",
          title: "L·ªói h·ªá th·ªëng",
          text: "M√°y ch·ªß g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.",
        });
        break;
      default:
        Swal.fire({
          icon: "error",
          title: "L·ªói",
          text: message,
        });
        break;
    }
  };

  return { data, loading, error, callApi };
}
